<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#> 
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string inputFile = @"..\\TestOA.Model\\TestOA.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);#>
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TestOA.DAL;
using TestOA.IDAL;
using TestOA.Model;

namespace TestOA.DALFactory
{
	public partial class DBSession : IDBSession
    {
	<#foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name)){#>
		private I<#=entity.Name#>Dal _<#=entity.Name#>Dal;

        public I<#=entity.Name#>Dal <#=entity.Name#>Dal
        {
            get
            {
                if (_<#=entity.Name#>Dal == null)
                {
                    _<#=entity.Name#>Dal = AbstractFactory.Create<#=entity.Name#>Dal();//通过抽象工厂封装了类的实例的创建
                }
                return _<#=entity.Name#>Dal;
            }

            set
            {
                _<#=entity.Name#>Dal = value;
            }
        }
	<#}#>
	}
}